package mfu.oodp.view;

import mfu.oodp.controller.TransactionController;
import mfu.oodp.model.Account;
import mfu.oodp.model.Agent.Agent;
import mfu.oodp.model.Transaction.Transaction;
import mfu.oodp.model.Transaction.Transaction.TransactionType;

import javax.swing.*;
import org.jdesktop.swingx.JXFrame;
import java.awt.*;

public class TransactionView extends JXFrame {
    private final TransactionController txController;
    private final Agent currentAgent;
    private static int transactionIdCounter = 1; // ✅ Static counter for sequential Transaction IDs

    public TransactionView(TransactionController txController, Agent agent) {
        super("Perform Transaction");
        this.txController = txController;
        this.currentAgent = agent;

        setSize(500, 350);
        setLayout(new GridLayout(7, 2));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        // ✅ Auto-generate Transaction ID
        String autoGeneratedTransactionId = String.valueOf(transactionIdCounter++);

        JTextField txIdField = new JTextField(autoGeneratedTransactionId);
        txIdField.setEditable(false); // Make the Transaction ID field read-only
        JTextField fromField = new JTextField();
        JTextField toField = new JTextField();
        JTextField amountField = new JTextField();
        JComboBox<String> typeBox = new JComboBox<>(new String[]{"DEPOSIT", "WITHDRAWAL", "TRANSFER"});

        JButton submitBtn = new JButton("Submit Transaction");

        add(new JLabel("Transaction ID:"));
        add(txIdField);
        add(new JLabel("From Account ID:"));
        add(fromField);
        add(new JLabel("To Account ID:")); // Initially added, but will be hidden for DEPOSIT
        add(toField);
        add(new JLabel("Amount:"));
        add(amountField);
        add(new JLabel("Type:"));
        add(typeBox);
        add(new JLabel(""));
        add(submitBtn);

        // ✅ Show/Hide "To Account ID" based on Transaction Type
        typeBox.addActionListener(e -> {
            String selectedType = (String) typeBox.getSelectedItem();
            boolean showToField = selectedType.equals("TRANSFER") || selectedType.equals("WITHDRAWAL");
            toField.setVisible(showToField);
            ((JLabel) getContentPane().getComponent(4)).setVisible(showToField); // Label for "To Account ID"
            revalidate();
            repaint();
        });

        submitBtn.addActionListener(e -> {
            try {
                String txId = autoGeneratedTransactionId;
                String from = fromField.getText();
                String to = toField.getText();
                double amount = Double.parseDouble(amountField.getText());
                TransactionType type = TransactionType.valueOf((String) typeBox.getSelectedItem());
        
                // Retrieve accounts from the AccountController
                Account fromAccount = txController.getAccount(from);
                Account toAccount = txController.getAccount(to);
        
                // Perform the transaction
                Transaction tx = txController.performTransaction(txId, from, to, amount, type, currentAgent);
        
                // Safely retrieve balances
                double fromBalance = fromAccount != null ? fromAccount.getBalance() : 0.0;
                double toBalance = toAccount != null ? toAccount.getBalance() : 0.0;
        
                // Show success message
                String message = "✅ Transaction Success: " + tx.getTransactionId() +
                        "\nFrom Account ID: " + (fromAccount != null ? fromAccount.getAccountId() : "N/A") +
                        "  Balance: " + (fromAccount != null ? fromBalance : "N/A") +
                        "\nTo Account ID: " + (toAccount != null ? toAccount.getAccountId() : "N/A") +
                        "  Balance: " + (toAccount != null ? toBalance : "N/A") +
                        "\nAmount Changed: " + amount ;
                        
                        
                JOptionPane.showMessageDialog(this, message);
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "❌ Error: " + ex.getMessage());
            }
        });
    }
}